# -*- graphql -*-
#
# michael a.g. aïvázis <michael.aivazis@para-sim.com>
# (c) 1998-2021 all rights reserved

schema {
  query: Query
  mutation: Mutation
}


# the top level query
type Query {
  # the active flow
  flow(name: String = ""): Flow!

  # the set of protocols for products and factories in a given package
  catalog(package: String = "flocor"): Catalog
  # the set of simple trait types
  traits: [Trait!]!
  # server version information
  version: Version!
}


# mutations
type Mutation {
  # place a new node in the flow
  createNode(nodeinfo: NodeInfoInput!): FlowNode!
}

input NodeInfoInput {
  # the kind of node
  category: String!
  # its family name
  family: String!
  # and its location on diagram
  x: Int!
  y: Int!
}


# the flow
type Flow {
  # flow identification
  id: ID!
  # the name of the flow
  name: String!
  # and its type
  family: String!

  # the set of macros
  macros: [Macro!]!
}


# an undifferentiated node
type FlowNode {
  # the node id
  id: ID!
}

# a macro is a named+typed variable
type Macro {
  id: ID!
  name: String!
  family: String!
  position: Position!
}


# the set of simple trait types
type Trait {
  schema: String!
  category: String!
}


# the full set of known specifications and producers in a given package
type Catalog {
  # the package name
  package: String!
  # known product specifications
  specifications: [Specification!]!
  # known factory descriptions
  producers: [Producer!]!
}


# basic types
type Position {
  # the diagram coordinates of a node
  x: Int!
  y: Int!
}


# the protocol implemented by data products
type Specification {
  # specifications have family names
  family: String!
}


# the protocol implemented by factories
type Producer {
  # producers have family names
  family: String!
  # inputs
  inputs: [Specification!]!
  # and outputs
  outputs: [Specification!]!
}


# server version
type Version {
  major: Int!
  minor: Int!
  micro: Int!
  revid: String!
}

# end of file
