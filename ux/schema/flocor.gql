# -*- graphql -*-
#
# michael a.g. aïvázis <michael.aivazis@para-sim.com>
# (c) 1998-2021 all rights reserved

schema {
  query: Query
  mutation: Mutation
}


# the top level query
type Query {
  # the active flow
  flow(name: String = ""): Flow!

  # the set of protocols for products and factories in a given package
  catalog(package: String = "flocor"): Catalog

  # basic node from {pyre.calc}
  # variables
  calcVariables: [Specification!]!
  # and operators
  calcOperators: [Producer!]!

  # server version information
  version: Version!

  # fetch a node given its id
  node(id: ID!): Node
}


# the flow
type Flow implements Node {
  # flow identification
  id: ID!
  # the name of the flow
  name: String!
  # and its type
  family: String!

  # the set of products
  products(after: String, first: Int, before: String, last: Int): ProductConnection!
  # the set of factories
  factories(after: String, first: Int, before: String, last: Int): FactoryConnection!
  # the set of bound and unbound product slots
  slots(after: String, first: Int, before: String, last: Int): SlotConnection!
  # the connectors
  connectors(after: String, first: Int, before: String, last: Int): ConnectorConnection!
  # the labels
  labels(after: String, first: Int, before: String, last: Int): LabelConnection!
}


# a product is a named+typed variable
type Product implements Node {
  id: ID!
  name: String
  family: String!
  position: Position!
}

# support for product connections
type ProductConnection {
  edges: [ProductEdge]
  pageInfo: PageInfo!
}

type ProductEdge {
  node: Product
  cursor: String!
}


# factories
type Factory implements Node {
  id: ID!
  name: String
  family: String!
  position: Position!
  inputs: Int!
  outputs: Int!
}

# support for factory connections
type FactoryConnection {
  edges: [FactoryEdge]
  pageInfo: PageInfo!
}

type FactoryEdge {
  node: Factory
  cursor: String!
}


# a slot is a pairing of a specification with a producer
type Slot implements Node {
  id: ID!
  bound: Boolean!
  position: Position!
}

# support for slot connections
type SlotConnection {
  edges: [SlotEdge]
  pageInfo: PageInfo!
}

type SlotEdge {
  node: Slot
  cursor: String!
}


# a connector from a factory to a slot
type Connector {
  id: ID!
  inp: Boolean!
  factoryAt: Position!
  slotAt: Position!
}

# support for slot connections
type ConnectorConnection {
  edges: [ConnectorEdge]
  pageInfo: PageInfo!
}

type ConnectorEdge {
  node: Connector
  cursor: String!
}


# labels
type Label implements Node {
  id: ID!
  value: String
  category: String
  position: Position!
}

# support for slot connections
type LabelConnection {
  edges: [LabelEdge]
  pageInfo: PageInfo!
}

type LabelEdge {
  node: Label
  cursor: String!
}


# the full set of known specifications and producers in a given package
type Catalog {
  # the package name
  package: String!
  # known product specifications
  specifications: [Specification!]!
  # known factory descriptions
  producers: [Producer!]!
}

# the protocol implemented by data products
type Specification {
  # specifications have family names
  family: String!
}

# the protocol implemented by factories
type Producer {
  # producers have family names
  family: String!
  # inputs
  inputs: [String!]!
  # and outputs
  outputs: [String!]!
}


# server version
type Version {
  major: Int!
  minor: Int!
  micro: Int!
  revid: String!
}


# mutations
type Mutation {

  # {calc} nodes
  addCalcVariable(nodeinfo: NewNodeInput!): NewProductInfo!
  addCalcOperator(nodeinfo: NewNodeInput!): NewFactoryInfo!

  # move an existing node
  moveNode(nodeinfo: MoveNodeInput!): MoveNode!
  # when the node move end
  moveNodeEnd(nodeinfo: MoveNodeInput!): MoveNodeEnd!
}


# the input payload to the mutation that adds nodes to the diagram
input NewNodeInput {
  # the flow to which it belongs
  flow: ID!
  # the family name of the node
  family: String!
  # and its location in the diagram
  x: Int!
  y: Int!
}

# the result payload for the mutation that adds factories to the diagram
type NewFactoryInfo {
  # the flow that owns the new node
  flow: ID!
  # the node that was added
  node: Factory!
  # the list of slots
  slots: [Slot!]!
  # the list of labels
  labels: [Label!]!
  # and the list of indings
  connectors: [Connector!]!
}


# the result payload for the mutation that adds products to the diagram
type NewProductInfo {
  # the flow that owns the new node
  flow: ID!
  # the bound slot that was added
  slot: Slot!
  # and its label
  label: Label!
}


# the input payload to the mutation that moves nodes around
input MoveNodeInput {
  # the flow that owns the moving node
  flow: ID!
  # the id of the moving node
  id: ID!
  # and its new location on the diagram
  x: Int!
  y: Int!
}


# the result payload for the mutation that moves nodes around
type MoveNode {
  # the flow that owns the new node
  flow: ID!
  # refresh the information of the moving node
  node: Node!
  # the updated labels
  labels: [Label!]!
  # the updated connectors
  connectors: [Connector!]!
}


# the result payload for the mutation that alerts the server a node has stopped moving
type MoveNodeEnd {
  # the flow that owns the new node
  flow: ID!
  # the slot updates
  slot: Slot
  # if the move resulted in a binding, there is a node to remove from the diagram
  dead: ID
  # the new labels
  newLabels: [Label!]!
  # the discarded labels
  delLabels: [ID!]!
  # the new connectors
  newConnectors: [Connector!]!
  # the discarded connectors
  delConnectors: [ID!]!
}


# basic types
# node position
type Position {
  # the diagram coordinates of a node
  x: Int!
  y: Int!
}


# interfaces
# the flow node interface
interface Node {
  # the node id
  id: ID!
  # and its position
  position: Position
}


# boilerplate for connections
type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}


# end of file
