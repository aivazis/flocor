// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2021 all rights reserved

// code guard
#if !defined(flocor_products_Raster_icc)
#error this file contains implementation details for flocor::products::Raster
#else


// metamethods
template <class specT, bool isReadOnly>
template <typename... Args>
constexpr flocor::products::Raster<specT, isReadOnly>::Raster(
    spec_const_reference spec, Args &&... args) :
    grid_type(spec.layout(), std::forward<Args>(args)...)
{}


// interface
template <class specT, bool isReadOnly>
constexpr auto
flocor::products::Raster<specT, isReadOnly>::cells() const -> std::size_t
{
    // my grid knows
    return this->layout().cells();
}


template <class specT, bool isReadOnly>
constexpr auto
flocor::products::Raster<specT, isReadOnly>::bytes() const -> std::size_t
{
    // easy enough
    return sizeof(typename specT::pixel_type) * this->cells();
}


// tile factory
template <class specT, bool isReadOnly>
constexpr auto
flocor::products::Raster<specT, isReadOnly>::tile(
    index_const_reference base, shape_const_reference shape) const -> raster_type
{
    // specify the region
    auto box = this->layout().box(base, shape);
    // build the tile
    return raster_type(box, this->data());
}


// static interface
// my read/write flag
template <class specT, bool isReadOnly>
constexpr auto
flocor::products::Raster<specT, isReadOnly>::readOnly() -> bool
{
    // easy enough
    return isReadOnly;
}


#endif

// end of file
